name: Deployment
on:
  workflow_call:
    inputs:
      REGISTRY:
        description: Custom container registry, e.g. registry.gitlab.com/owner/repo. Will use ghcr.io/owner/repo/repo by default
        type: string
      WERF_ENV:
        description: Werf env (production, staging, testing, etc). Default 'production' for tags, branch name for branches
        type: string
      WERF_NAMESPACE:
        description: Werf namespace, where {0} is repository, {1} is branch or 'production' for tag
        type: string
        default: '{0}-{1}'
      DOMAIN:
        description: Hosting domain, where {0} is WERF_NAMESPACE
        type: string
        default: '{0}.${{ github.repository_owner }}.icncd.ru'
      DOMAIN2:
        description: Hosting domain2, where {0} is WERF_NAMESPACE
        type: string
        default: '{0}.${{ github.repository_owner }}.icncd.dev'
      # SETENV:
      #   description: Some env variable, e.g. env.DOMAIN=example.com
      #   type: string
      REVIEW_LABEL:
        description: Pull request label to converge (review by default)
        type: string
        default: review
      CLUSTER_URL:
        description: Cluser URL, default https://kube01.icncd.ru:6443
        type: string
        default: https://kube01.icncd.ru:6443
      STEP_CA_URL:
        description: Step CA URL, default https://ca.iconicompany.com:4443
        type: string
        default: https://ca.iconicompany.com:4443
      STEP_FINGERPRINT:
        description: Root CA fingerprint
        type: string
        default: a08919780dddca4f4af0a9f68952d6379d7060c30b98d396c61aaa3fd0295838
      KUBE_CONTEXT:
        description: KUBE_CONFIG context name (production, staging, testing, etc). Will use secrets.KUBE_CONFIG if passed
        type: string
      DOCKER_BUILDKIT:
        description: Flag to enable DOCKER_BUILDKIT
        type: boolean
      RUNS_ON:
        description: Runner requirements
        type: string
        default: ubuntu-latest
      WERF_SECRET_KEY:
        description: Key for secret files/values. Required if secret files/values used in templates.
        type: string
      COPY_STEP_CERT:
          description: Copy .step with x509 certificates to workspace
          type: boolean
      DATABASE_URL:
        description: Database DATABASE_HOST for testing 
        type: string
      WERF_ADD_CUSTOM_TAG_BRANCH:
        description: "Branch/feature tag for werf. Defaults to branch name."
        type: string
        default: ${{ github.head_ref || github.ref_name }}
      WERF_ADD_CUSTOM_TAG_LATEST:
        description: "Latest tag for werf, usually 'latest' for releases. Set to empty to disable."
        type: string
        default: ${{ startsWith(github.ref, 'refs/tags/v') && 'latest' || '' }}
    secrets:
      REGISTRY_USERNAME:
        description: Container registry login. If not set, github.actor is used
      KUBE_CONFIG:
        description: K8s config in base64. Used if KUBE_CONTEXT is passed as input
      REGISTRY_PASSWORD:
        description: Container registry password.  If not set, secrets.GITHUB_TOKEN is used
      WERF_SECRET_KEY:
        description: Key for secret files/values. Required if secret files/values used in templates.

concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

env:
  DOMAIN: ${{ inputs.DOMAIN }}
  DOMAIN2: ${{ inputs.DOMAIN2 }}
  WERF_ENV: ${{ inputs.WERF_ENV || startsWith(github.ref, 'refs/tags/v') && 'production' || 'testing' }}
  WERF_NAME: ${{ github.event.repository.name }}
  WERF_NAMESPACE:  ${{ format(inputs.WERF_NAMESPACE, github.event.repository.name, startsWith(github.ref, 'refs/tags/v') && 'production' || ( github.head_ref || github.ref_name ) ) }}
  WERF_KUBE_CONTEXT: ${{ inputs.KUBE_CONTEXT  }}
  # WERF_SET_ENV: ${{ inputs.setenv }}
  WERF_REPO: ${{ inputs.registry }}
  WERF_SECRET_KEY: ${{ inputs.WERF_SECRET_KEY || secrets.WERF_SECRET_KEY }}
  DOCKER_BUILDKIT: ${{inputs.DOCKER_BUILDKIT}}
  IS_LABELED_PR: ${{ github.event_name == 'pull_request' && contains( github.event.pull_request.labels.*.name, inputs.REVIEW_LABEL ) }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
  packages: write # This is required for package publish
jobs:
  deployment:
    name: Deployment
    runs-on: ${{ inputs.RUNS_ON }}
    steps:
      - name: Step CA bootstrap
        id: bootstrap
        if: ${{ ! inputs.KUBE_CONTEXT }}
        run: |
          curl -Ls https://github.com/iconicompany/iconicactions/raw/main/scripts/step-github.sh | bash -
        env:
          STEP_CA_URL: ${{ inputs.STEP_CA_URL }}
          STEP_FINGERPRINT: ${{ inputs. STEP_FINGERPRINT }}
          CLUSTER_URL: ${{ inputs.CLUSTER_URL }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Copy Step Certificates
        if: ${{ inputs.COPY_STEP_CERT }}
        run: |
          cp -rv $HOME/.step ${{ github.workspace }}/.step
      - name: Parse DATABASE_URL
        id: parseurl
        run: |
          url=${{ inputs.DATABASE_URL }}
          protocol=$(echo "$url" | grep "://" | sed -e's,^\(.*://\).*,\1,g')
          url_no_protocol=$(echo "${url/$protocol/}")
          protocol=$(echo "$protocol" | tr '[:upper:]' '[:lower:]')
          userpass=$(echo "$url_no_protocol" | grep "@" | cut -d"/" -f1 | rev | cut -d"@" -f2- | rev)
          pass=$(echo "$userpass" | grep ":" | cut -d":" -f2)
          if [ -n "$pass" ]; then
            user=$(echo "$userpass" | grep ":" | cut -d":" -f1)
          else
            user="$userpass"
          fi
          hostport=$(echo "${url_no_protocol/$userpass@/}" | cut -d"/" -f1)
          host=$(echo "$hostport" | cut -d":" -f1)
          port=$(echo "$hostport" | grep ":" | cut -d":" -f2)
          path=$(echo "$url_no_protocol" | grep "/" | cut -d"/" -f2-)
          echo "protocol=$protocol" >> $GITHUB_OUTPUT
          echo "userpass=$userpass" >> $GITHUB_OUTPUT
          echo "user=$user" >> $GITHUB_OUTPUT
          echo "pass=$pass" >> $GITHUB_OUTPUT
          echo "host=$host" >> $GITHUB_OUTPUT
          echo "port=$port" >> $GITHUB_OUTPUT
          echo "path=$path" >> $GITHUB_OUTPUT
      - name: Setup database
        id: database
        if: ${{ steps.parseurl.outputs.HOST }}
        run: |
          if ! psql -U "$CONNECT_USER" -h "$DATABASE_HOST" postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DATABASE_USER';" | grep -q 1; then
            psql -U "$CONNECT_USER" -h "$DATABASE_HOST" postgres -c "create user \"${DATABASE_USER}\" with CREATEDB;"  
            psql -U "$CONNECT_USER" -h "$DATABASE_HOST" postgres -c "GRANT \"${DATABASE_USER}\" TO current_user;"  
          fi
          if [[ -f "$DUMPFILE" ]]; then
            if ! psql -U "$CONNECT_USER" -h "$DATABASE_HOST" postgres -tc "SELECT 1 FROM pg_database WHERE datname = '$DATABASE_NAME';" | grep -q 1; then
              psql -U "$CONNECT_USER" -h "$DATABASE_HOST" postgres -c "create database \"${DATABASE_NAME}\" OWNER \"${DATABASE_USER}\";"
              cat "$DUMPFILE"  | psql -U "$CONNECT_USER" -h "$DATABASE_HOST" "${DATABASE_NAME}"
              psql -U "$CONNECT_USER" -h "$DATABASE_HOST" "${DATABASE_NAME}" -c "REASSIGN OWNED BY current_user TO \"${DATABASE_USER}\";"
            fi
          fi
          echo "DATABASE_URL=$DATABASE_PROTOCOL$DATABASE_USER@$DATABASE_HOST/$DATABASE_NAME" >> $GITHUB_OUTPUT
        env:
          CONNECT_USER: ${{ steps.bootstrap.outputs.CERTIFICATE_CN }}
          DATABASE_PROTOCOL: ${{ steps.parseurl.outputs.protocol }}
          DATABASE_USER: ${{ steps.parseurl.outputs.user ||  format('{0}{1}', env.WERF_NAME, env.WERF_ENV)  }}
          DATABASE_NAME: ${{ steps.parseurl.outputs.path ||  format('{0}{1}', env.WERF_NAME, env.WERF_ENV)  }}
          DATABASE_HOST: ${{ steps.parseurl.outputs.host }}
          DUMPFILE: "sql/data.sql"
      - name: Check werf installation
        id: check_werf
        run: |
          if werf; then
              echo "installed=true" >> "$GITHUB_OUTPUT"
          else
              echo "installed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Install werf
        if: steps.check_werf.outputs.installed == 'false'
        uses: werf/actions/install@v1.2
      # see also https://github.com/marketplace/actions/github-slug
      - uses: rlespinasse/slugify-value@v1.x
        with:
          key: WERF_NAMESPACE
      - run: echo WERF_NAMESPACE=${WERF_NAMESPACE_SLUG_URL} >> $GITHUB_ENV
      - run: echo DOMAIN=${{ format(inputs.DOMAIN, env.WERF_NAMESPACE) }} >> $GITHUB_ENV
      - run: echo DOMAIN2=${{ format(inputs.DOMAIN2, env.WERF_NAMESPACE) }} >> $GITHUB_ENV
      # - run: echo WERF_NAMESPACE=$(werf slugify -f kubernetes-namespace ${WERF_NAMESPACE}) >> $GITHUB_ENV
      - name: Sanitize and set custom tags
        run: |
          IMAGE_COUNT=$(grep -c '^image:' werf.yaml || true)
          TAG_PREFIX=""
          if [ "$IMAGE_COUNT" -gt 1 ]; then
            TAG_PREFIX="%image%-"
          fi
          # Sanitize branch tag
          TAG=$(echo "${{ inputs.WERF_ADD_CUSTOM_TAG_BRANCH }}" | sed -e 's/[^a-zA-Z0-9.-]/-/g' | sed -e 's/^[._-]//' -e 's/[._-]$//' | cut -c 1-128)
          echo "WERF_ADD_CUSTOM_TAG_BRANCH=${TAG_PREFIX}$TAG" >> $GITHUB_ENV

          # Conditionally set and sanitize latest tag
          LATEST_TAG_INPUT="${{ inputs.WERF_ADD_CUSTOM_TAG_LATEST }}"
          if [ -n "$LATEST_TAG_INPUT" ]; then
            TAG=$(echo "$LATEST_TAG_INPUT" | sed -e 's/[^a-zA-Z0-9.-]/-/g' | sed -e 's/^[._-]//' -e 's/[._-]$//' | cut -c 1-128)
            echo "WERF_ADD_CUSTOM_TAG_LATEST=${TAG_PREFIX}$TAG" >> $GITHUB_ENV
          fi
      - name: Werf converge
        if: ${{ github.event_name == 'push' || env.IS_LABELED_PR == 'true' && github.event.action != 'closed' }}
        run: |
          . $(werf ci-env github --as-file)
          werf cr login -u ${{ secrets.REGISTRY_USERNAME || github.actor }} -p ${{ secrets.REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }} ${{ inputs.registry || 'ghcr.io' }}
          werf kubectl create namespace ${{ env.WERF_NAMESPACE }} --dry-run=client -o yaml | sed  '/^metadata:/a\ \ labels: {"autocert.step.sm":"enabled"}' | werf kubectl apply -f - 
          werf converge
          kubectl label namespace --overwrite ${{ env.WERF_NAMESPACE }} autocert.step.sm=enabled
        env:
          WERF_KUBECONFIG_BASE64: ${{ inputs.KUBE_CONTEXT && secrets.KUBE_CONFIG || steps.bootstrap.outputs.KUBE_CONFIG }}
          WERF_ENV: ${{ env.WERF_ENV }}
          WERF_SET_DOMAIN: env.DOMAIN=${{ env.DOMAIN }}
          WERF_SET_DOMAIN2: env.DOMAIN2=${{ env.DOMAIN2 }}
          WERF_SET_DATABASE_URL: env.DATABASE_URL=${{ steps.database.outputs.DATABASE_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Werf dismiss
        if: ${{ github.event_name == 'pull_request' && ((github.event.action == 'closed' && env.IS_LABELED_PR == 'true') || (github.event.action == 'unlabeled' && env.IS_LABELED_PR == 'false')) }}
        run: . $(werf ci-env github --as-file); werf dismiss --with-namespace
        env:
          WERF_KUBECONFIG_BASE64: ${{ inputs.KUBE_CONTEXT && secrets.KUBE_CONFIG || steps.bootstrap.outputs.KUBE_CONFIG }}
          WERF_ENV: ${{ env.WERF_ENV }}
          WERF_SET_DOMAIN: env.DOMAIN=${{ env.DOMAIN }}
          WERF_SET_DOMAIN2: env.DOMAIN2=${{ env.DOMAIN2 }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
